1
lastElement :: [a] -> Maybe a
lastElement [] = Nothing
lastElement [x] = Just x
lastElement (_:xs) = lastElement xs
main :: IO ()
main = do
    let myList = ["g", "h", "i"]
    let result2 = lastElement myList2
    putStrLn $ show result2  



2 
reverseList :: [Int] -> [Int]
reverseList [] = []
reverseList (x:xs) = reverseList xs ++ [x]
main :: IO ()
main = do
    let myList = [1, 2, 3]
    let reversed = reverseList myList
    putStrLn $ show reversed
3
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)
main :: IO ()
main = do
    let result = applyTwice (+2) 5
    putStrLn $ show result

4
import Data.Char (toLower)

isPalindrome :: String -> Bool
isPalindrome str = cleanedStr == reverse cleanedStr
    where cleanedStr = filter (`elem` ['a'..'z']) $ map toLower str
main :: IO ()
main = do
    let pali1 = "race car"
    let pali2 = "hello"
    
    let result = isPalindrome pali1
    let resultt = isPalindrome pali2
    
    putStrLn $ show result  
    putStrLn $ show resultt
